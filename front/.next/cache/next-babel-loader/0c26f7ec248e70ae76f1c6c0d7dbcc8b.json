{"ast":null,"code":"import { all, fork, takeLatest, call, put } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      // dispatch와 같은역할\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN, login);\n}\n\nfunction* helloSaga() {\n  yield take(HELLO_SAGA); // HELLO_SAGA를 기다림\n\n  console.log('hello saga');\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), helloSaga()]);\n}","map":{"version":3,"sources":["C:/playground/reactNodebird/nodebird/front/saga/user.js"],"names":["all","fork","takeLatest","call","put","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","watchLogin","helloSaga","take","console","log","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMP,IAAI,CAACM,QAAD,CAAV;AACA,UAAML,GAAG,CAAC;AAAE;AACRO,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAMM,CAAN,EAAS;AACP,UAAMR,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUM,UAAV,GAAuB;AACnB,QAAMX,UAAU,CAACG,MAAD,EAASK,KAAT,CAAhB;AACH;;AAED,UAAUI,SAAV,GAAsB;AAClB,QAAMC,IAAI,CAACP,UAAD,CAAV,CADkB,CACK;;AACvBQ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMlB,GAAG,CAAC,CACNC,IAAI,CAACY,UAAD,CADE,EAENC,SAAS,EAFH,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, takeLatest, call, put } from 'redux-saga/effects'\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA'\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI)\r\n        yield put({ // dispatch와 같은역할\r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN, login)\r\n}\r\n\r\nfunction* helloSaga() {\r\n    yield take(HELLO_SAGA) // HELLO_SAGA를 기다림\r\n    console.log('hello saga')\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        helloSaga()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}