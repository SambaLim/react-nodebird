{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.get('/login');\n}\n\nfunction signUpAPI() {\n  return axios.get('/login');\n}\n\nfunction* login() {\n  try {\n    yield delay(2000); //yield call(loginAPI)\n\n    yield put({\n      // dispatch와 같은역할\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* signUp() {\n  try {\n    //yield call(signUpAPI)\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/playground/reactNodebird/nodebird/front/saga/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","loginAPI","get","signUpAPI","login","delay","type","e","signUp","console","error","watchLogin","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,QAAkE,oBAAlE;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAChB,SAAOD,KAAK,CAACE,GAAN,CAAU,QAAV,CAAP;AACH;;AAED,SAASC,SAAT,GAAqB;AACjB,SAAOH,KAAK,CAACE,GAAN,CAAU,QAAV,CAAP;AACH;;AAED,UAAUE,KAAV,GAAkB;AACd,MAAI;AACA,UAAMC,KAAK,CAAC,IAAD,CAAX,CADA,CAEA;;AACA,UAAMb,GAAG,CAAC;AAAE;AACRc,MAAAA,IAAI,EAAEX;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAMY,CAAN,EAAS;AACP,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUY,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMhB,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAER;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAMS,CAAN,EAAS;AACPE,IAAAA,OAAO,CAACC,KAAR,CAAcH,CAAd;AACA,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAEP;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUY,UAAV,GAAuB;AACnB,QAAMrB,SAAS,CAACI,cAAD,EAAiBU,KAAjB,CAAf;AACH;;AAED,UAAUQ,WAAV,GAAwB;AACpB,QAAMtB,SAAS,CAACO,eAAD,EAAkBW,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAChC,QAAM1B,GAAG,CAAC,CACNC,IAAI,CAACuB,UAAD,CADE,EAENvB,IAAI,CAACwB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects'\r\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'\r\nimport axios from 'axios'\r\n\r\nfunction loginAPI() {\r\n    return axios.get('/login')\r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.get('/login')\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield delay(2000)\r\n        //yield call(loginAPI)\r\n        yield put({ // dispatch와 같은역할\r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n        //yield call(signUpAPI)\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        })\r\n    } catch(e) {\r\n        console.error(e)\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login)\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}