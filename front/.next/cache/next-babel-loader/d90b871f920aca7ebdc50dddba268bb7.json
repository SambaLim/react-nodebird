{"ast":null,"code":"var _jsxFileName = \"C:\\\\playground\\\\reactNodebird\\\\nodebird\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Comment, Input, List } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentForOpened,\n    1: setCommentForOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const onToggleComment = (() => {\n    setCommentForOpened(prev => !prev);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST\n    });\n  }, []);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })), commentForOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, item.User.nickname[0]),\n      content: item.content,\n      datetime: item.createdAt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/playground/reactNodebird/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Icon","Button","Avatar","Form","Comment","Input","List","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentForOpened","setCommentForOpened","commentText","setCommentText","me","state","user","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","onChangeCommentText","target","value","createdAt","img","User","nickname","content","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport { Card, Icon, Button, Avatar, Form, Comment, Input, List } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentForOpened, setCommentForOpened] = useState(false)\r\n    const [commentText, setCommentText] = useState('')\r\n    const { me } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const onToggleComment = (() => {\r\n        setCommentForOpened(prev => !prev)\r\n    }, [])\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault()\r\n        if(!me) {\r\n            return alert('로그인이 필요합니다.')\r\n        }\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n        })\r\n    }, [])\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                key={ +post.createdAt }\r\n                cover={ post.img && <img alt=\"example\" src={post.img} />}\r\n                actions={[\r\n                    <Icon type=\"retweet\" key=\"retweet\" />,\r\n                    <Icon type=\"heart\" key=\"heart\" />,\r\n                    <Icon type=\"message\" key=\"message\" onClick={ onToggleComment }/>,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n                ]}\r\n                extra={<Button>팔로우</Button>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{ post.User.nickname[0] }</Avatar>}\r\n                    title={ post.User.nickname }\r\n                    description={ post.content }\r\n                />\r\n            </Card>\r\n            {commentForOpened && (\r\n                <>\r\n                    <Form onSubmit={ onSubmitComment }>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={ commentText } onChange={ onChangeCommentText } />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={ `${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={ item.User.nickname }\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={ item.content }\r\n                                    datetime={ item.createdAt }\r\n                                />\r\n                            </li>\r\n                        )}\r\n\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n}\r\n\r\nexport default PostCard"]},"metadata":{},"sourceType":"module"}