{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST } from '../reducers/user';\n\nfunction loginAPI() {// 서버에 요청\n}\n\nfunction signUpAPI() {}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // dispatch와 같은역할\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction signUp() {\n  return _regeneratorRuntime.wrap(function signUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(signUpAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/playground/reactNodebird/nodebird/front/saga/user.js"],"names":["login","signUp","watchLogin","watchSignUp","userSaga","all","fork","takeLatest","takeEvery","call","put","take","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","loginAPI","signUpAPI","type","console","error","LOG_IN_REQUEST"],"mappings":";;;;yBAWUA,K;;;yBAaAC,M;;;yBAcAC,U;;;yBAIAC,W;;;yBAIeC,Q;;AA9CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,QAAkE,oBAAlE;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,eAAzC,QAAgE,kBAAhE;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,SAASC,SAAT,GAAqB,CAEpB;;AAED,SAAUhB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMS,IAAI,CAACM,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAML,GAAG,CAAC;AAAE;AACRO,YAAAA,IAAI,EAAEL;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMF,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMQ,IAAI,CAACO,SAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMN,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEL;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQM,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMT,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACa,cAAD,EAAiBpB,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,SAAS,CAACM,eAAD,EAAkBb,MAAlB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACJ,UAAD,CADE,EAENI,IAAI,CAACH,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects'\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST } from '../reducers/user'\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청\r\n}\r\n\r\nfunction signUpAPI() {\r\n\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI)\r\n        yield put({ // dispatch와 같은역할\r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n        yield call(signUpAPI)\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    } catch(e) {\r\n        console.error(e)\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, login)\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}