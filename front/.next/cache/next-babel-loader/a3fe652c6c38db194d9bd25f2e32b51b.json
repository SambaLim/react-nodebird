{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(hello),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchHello),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, signUp } from '../reducers/user';\nvar HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // dispatch와 같은역할\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction hello() {\n  return _regeneratorRuntime.wrap(function hello$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return delay(1000);\n\n        case 2:\n          _context3.next = 4;\n          return put({\n            type: 'BYE_SAGA'\n          });\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchHello() {\n  return _regeneratorRuntime.wrap(function watchHello$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(HELLO_SAGA, hello);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["C:/playground/reactNodebird/nodebird/front/saga/user.js"],"names":["login","watchLogin","hello","watchHello","watchSignUp","userSaga","all","fork","takeLatest","takeEvery","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","signUp","HELLO_SAGA","loginAPI","type","LOG_IN_REQUEST","delay"],"mappings":";;;;yBASUA,K;;;yBAaAC,U;;;yBAIAC,K;;;yBAOAC,U;;;yBAIAC,W;;;yBAIeC,Q;;AAzCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,QAAkE,oBAAlE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,EAAiDC,eAAjD,EAAkEC,MAAlE,QAAgF,kBAAhF;AAEA,IAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,SAAUnB,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMU,IAAI,CAACS,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMR,GAAG,CAAC;AAAE;AACRS,YAAAA,IAAI,EAAEN;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMH,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAEL;AADA,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACa,cAAD,EAAiBrB,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMoB,KAAK,CAAC,IAAD,CAAX;;AADJ;AAAA;AAEI,iBAAMX,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAE;AADA,WAAD,CAAT;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAUjB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,SAAS,CAACS,UAAD,EAAahB,KAAb,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,SAAS,CAACO,eAAD,EAAkBC,MAAlB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUZ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACN,UAAD,CADE,EAENM,IAAI,CAACH,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects'\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, signUp } from '../reducers/user'\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA'\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI)\r\n        yield put({ // dispatch와 같은역할\r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN_REQUEST, login)\r\n}\r\n\r\nfunction* hello() {\r\n    yield delay(1000)\r\n    yield put({\r\n        type: 'BYE_SAGA'\r\n    })\r\n}\r\n\r\nfunction* watchHello() {\r\n    yield takeEvery(HELLO_SAGA, hello)\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchSignUp)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}