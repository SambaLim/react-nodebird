{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청\n}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({\n      // dispatch와 같은역할\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchSignUp() {}\n\nfunction* watchLogin() {\n  while (true) {\n    yield take(LOG_IN);\n    yield delay(2000);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  }\n}\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n}\n\nexport default function* userSaga() {\n  yield all([watchLogin(), watchSignUp(), watchHello()]);\n}","map":{"version":3,"sources":["C:/playground/reactNodebird/nodebird/front/saga/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","login","type","e","watchSignUp","watchLogin","delay","watchHello","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,QAAkE,oBAAlE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMR,IAAI,CAACO,QAAD,CAAV;AACA,UAAMN,GAAG,CAAC;AAAE;AACRQ,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAMM,CAAN,EAAS;AACP,UAAMT,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUM,WAAV,GAAwB,CAEvB;;AAED,UAAUC,UAAV,GAAuB;AACnB,SAAM,IAAN,EAAY;AACR,UAAMV,IAAI,CAACC,MAAD,CAAV;AACA,UAAMU,KAAK,CAAC,IAAD,CAAX;AACA,UAAMZ,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUU,UAAV,GAAuB;AACnB,QAAMhB,UAAU,CAACQ,UAAD,EAAa,aAAY;AACrC,UAAMO,KAAK,CAAC,IAAD,CAAX;AACA,UAAMZ,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GALe,CAAhB;AAMH;;AAED,eAAe,UAAUM,QAAV,GAAqB;AAChC,QAAMnB,GAAG,CAAC,CACNgB,UAAU,EADJ,EAEND,WAAW,EAFL,EAGNG,UAAU,EAHJ,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take } from 'redux-saga/effects'\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA'\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI)\r\n        yield put({ // dispatch와 같은역할\r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n\r\n}\r\n\r\nfunction* watchLogin() {\r\n    while(true) {\r\n        yield take(LOG_IN)\r\n        yield delay(2000)\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchHello() {\r\n    yield takeLatest(HELLO_SAGA, function*() {\r\n        yield delay(1000)\r\n        yield put({\r\n            type: 'BYE_SAGA'\r\n        })\r\n    })\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchLogin(),\r\n        watchSignUp(),\r\n        watchHello()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}