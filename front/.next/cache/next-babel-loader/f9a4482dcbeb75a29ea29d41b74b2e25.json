{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user';\nvar HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {// 서버에 요청\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // dispatch와 같은역할\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take(LOG_IN);\n\n        case 2:\n          _context3.next = 4;\n          return delay(2000);\n\n        case 4:\n          _context3.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([watchLogin(), watchSignUp()]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/playground/reactNodebird/nodebird/front/saga/user.js"],"names":["login","watchSignUp","watchLogin","userSaga","all","fork","takeLatest","call","put","take","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAILURE","HELLO_SAGA","loginAPI","type","delay"],"mappings":";;;;yBASUA,K;;;yBAaAC,W;;;yBAIAC,U;;;yBAQeC,Q;;AAlCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,QAAuD,kBAAvD;AAEA,IAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACH;;AAED,SAAUd,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,IAAI,CAACO,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMN,GAAG,CAAC;AAAE;AACRO,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOQ,iBAAMH,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUX,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,IAAI,CAACC,MAAD,CAAV;;AADJ;AAAA;AAEI,iBAAMM,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMR,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAe,SAAUR,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNF,UAAU,EADJ,EAEND,WAAW,EAFL,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, call, put, take } from 'redux-saga/effects'\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA'\r\n\r\nfunction loginAPI() {\r\n    // 서버에 요청\r\n}\r\n\r\nfunction* login() {\r\n    try {\r\n        yield call(loginAPI)\r\n        yield put({ // dispatch와 같은역할\r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield take(LOG_IN)\r\n    yield delay(2000)\r\n    yield put({\r\n        type: LOG_IN_SUCCESS,\r\n    })\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchLogin(),\r\n        watchSignUp()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}