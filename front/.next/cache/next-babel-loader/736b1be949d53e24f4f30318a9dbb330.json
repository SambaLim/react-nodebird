{"ast":null,"code":"var _jsxFileName = \"C:\\\\playground\\\\reactNodebird\\\\nodebird\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport { Card, Icon, Button, Avatar, Form, Comment, Input, List } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        // [addComment] action.data.postId\n        postId: post.id\n      }\n    });\n  }, []);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, item.User.nickname[0]),\n        content: item.content,\n        datetime: item.createdAt,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/playground/reactNodebird/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","Card","Icon","Button","Avatar","Form","Comment","Input","List","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport { Card, Icon, Button, Avatar, Form, Comment, Input, List } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false)\r\n    const [commentText, setCommentText] = useState('')\r\n    const { me } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    }, [])\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault()\r\n        if(!me) {\r\n            return alert('로그인이 필요합니다.')\r\n        }\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data: { // [addComment] action.data.postId\r\n                postId: post.id,\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                key={ +post.createdAt }\r\n                cover={ post.img && <img alt=\"example\" src={post.img} />}\r\n                actions={[\r\n                    <Icon type=\"retweet\" key=\"retweet\" />,\r\n                    <Icon type=\"heart\" key=\"heart\" />,\r\n                    <Icon type=\"message\" key=\"message\" onClick={ onToggleComment }/>,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n                ]}\r\n                extra={<Button>팔로우</Button>}\r\n            >\r\n                <Card.Meta\r\n                    avatar={<Avatar>{ post.User.nickname[0] }</Avatar>}\r\n                    title={ post.User.nickname }\r\n                    description={ post.content }\r\n                />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={ onSubmitComment }>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={ commentText } onChange={ onChangeCommentText } />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={ `${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={ item.User.nickname }\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={ item.content }\r\n                                    datetime={ item.createdAt }\r\n                                />\r\n                            </li>\r\n                        )}\r\n\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.object,\r\n    }),\r\n}\r\n\r\nexport default PostCard"]},"metadata":{},"sourceType":"module"}